#!pigshell

usage=<<EOH
map         -- Display map

Usage:
    map [-p] [-c <css>] [-t <tilesource>]
    map -l
    map -h | --help

Options:
    -h --help        Show this message.
    -c <css>         JSON string specifying CSS to be applied to map iframe
    -l               List currently supported sources of map tiles
    -p               Display pings instead of markers
    -t <tilesource>  Source of map tiles
EOH

if ! docopt $usage $*; then
    exit false
fi

TILESRCS=(MapQuestOpen.OSM MapQuestOpen.Aerial OpenStreetMap.Mapnik OpenStreetMap.BlackAndWhite Stamen.TonerLite Stamen.Watercolor)

TILESRC=$([ -n $"t ] && echo $t || [ -n $"MAPTILE ] && echo $MAPTILE || echo $TILESRCS(0))

if [ -n $"l ]; then
    for t in $TILESRCS; do
        [ $t = $TILESRC ] && echo $t "(default)" || echo $t
    done
    exit true
fi

HTML=<<EOH
<!DOCTYPE html>
<html>

<head>
<link rel="stylesheet" type="text/css" href="http://pigshell.com/common/lib/leaflet-0.7.2/leaflet.css" />
<script src="http://pigshell.com/common/lib/jquery-1.7.2/jquery-1.7.2.min.js"></script>
<script type='text/javascript' src='http://pigshell.com/common/lib/leaflet-0.7.2/leaflet.js'></script>
<script src="http://pigshell.com/extra/pframe.v0.js"></script>
<script src="http://pigshell.com/common/lib/leaflet-0.7.2/leaflet-providers.js"></script>
<script src="http://pigshell.com/common/lib/d3-3.4.1/d3.v3.min.js"></script>
<script src="http://pigshell.com/common/lib/leaflet-0.7.2/PingLayer.js"></script>
<style>
body { margin: 0; padding: 0; }
circle.ping {
    stroke: #111;
    stroke-width: 1px;
    fill: red;
}
</style>
</head>

<body>
<div id="map"></div>

<script type="text/javascript">

var smallicon = L.Icon.Default.extend({iconSize: [15, 12]});

var map, icon, pinglayer,
    cliopts = {},
    markers = [];

function init() {
    if (init._called) {
        return;
    }
    init._called = true;
    var defcss = {
        'width': $(window).width(),
        'height': $(window).height(),
        'border': '1px solid #aaa',
        'box-sizing': 'border-box'
    };

    $('#map').css(defcss);
    map = L.map('map', {
        center: [20.0, 5.0],
        zoom: 2
    });
    L.tileLayer.provider(cliopts.tilesrc).addTo(map);
    icon = new L.Icon.Default({
        iconSize: [18, 30],
        iconAnchor: [9, 30],
        popupAnchor: [1, -25],
        shadowSize: [30, 30]
    });
    if (cliopts.ping) {
        var popts = {
            duration: 800
        };
        pinglayer = L.pingLayer(popts).addTo(map);
        pinglayer.radiusScale().range([2, 10])
    }
}
init._called = false;

function next() {
    pframe.unext(function(res) {
        if (res === null) {
            if (markers.length) {
                var bounds = L.latLngBounds(markers),
                    mbounds = map.getBounds();
                if (!mbounds.contains(bounds)) {
                    map.fitBounds(bounds);
                }
            }
            return pframe.exit(true);
        }
        var geo = res.geo;
        if (geo && geo.type === 'Point' && cliopts.ping) {
            pinglayer.ping(geo.coordinates);
        } else if (geo && geo.type === 'Point') {
            var html = res.html || '<p>' + res.toString() + '</p>',
                pt = [geo.coordinates[1], geo.coordinates[0]],
                opts = $.extend({icon: icon}, res.name ? {title: res.name} : {});
            L.marker(pt, opts)
                .bindPopup(html)
                .addTo(map); 
            markers.push(pt);
        }
        return next();
    });
}

pframe.onnext = next;

pframe.onconfig = function(c) {
    var copts = c.opts || {};
    cliopts = copts;
    init();
};

</script>

</body>

</html>
EOH

cssopts=$([ -n $"c ] && echo "" "-c" $"c)
jframe -a "scripts,same-origin" -o tilesrc=$"TILESRC,ping=$"p $cssopts -O -s $HTML
