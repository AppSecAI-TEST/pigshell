#!pigshell

usage=<<EOH
xray         -- Inspect pipeline

Usage:
    xray [-c] [-n <items>] [-t <sec>] [-e <expr>]
    xray -h | --help

Options:
    -h --help   Show this message.
    -c          Flow ("continuous") mode, one item passed every few seconds
    -t <sec>    Advance one item every <sec> seconds in flow mode [default: 2]
    -n <items>  Buffer upto <items> objects [default: 5]
    -e <expr>   Javascript expression, e.g. 'x.attr === 10' to select objects
EOH

if ! docopt $usage $*; then
    exit false
fi

HTML=<<EOH
<!DOCTYPE html>
<html>

<head>
    <link href="http://pigshell.com/v/0.6.2/pigshell.css" rel="stylesheet"/>
    <style>

        body {
            font-family: monospace;
            font-size: 14px;
            line-height: 16px;
            margin: 0;
            padding: 0;
        }
        div.xitem {
            display: inline-block;
            margin: 0.25em;
        }
        div.xitem div {
            display: inline-block;
            padding: 0.25em;
            vertical-align: top;
        }
        .passed {
            background-color: #eee;
            border: 1px solid #666;
        }
        .enter {
            border: 1px solid green;
            /*background-color: rgb(229, 245, 224);*/
        }
        .update {
            border: 1px solid #222;
        }

        div.tooltip {
            position: absolute;
            padding: 0.5em;
            font-size: 10px;
            color: #222;
            background: #FFF;
            border-radius: 2px;
            pointer-events: none;
            box-shadow: 0px 0px 2px 0px #a6a6a6;
            max-width: 30em;
            max-height: 25em;
        }
    </style>
</head>

<body>
    <script src="http://code.jquery.com/jquery-1.7.2.min.js"></script>
    <script src="http://pigshell.com/extra/pframe.v0.js"></script>
    <script src="http://pigshell.com/common/d3.v3/d3.v3.min.js"></script>

    <div class="control">
        <select name="mode">
            <option value="batch" selected>Batch Mode</option>
            <option value="flow">Flow Mode</option>
        </select>
        <button name="control" class="control">Pass Batch</button>
        <button name="step" class="control">Pass 1 Item</button>
        Select All: <input name="selall" type="checkbox"></input>
        <button name="quit" class="control">Quit</button>
    </div>

    <div class="bag"></div>

    <script type="text/javascript">

    var defaults = {
        nitems: 5,
        speed: 2,
        defsel: true,
        batch_mode: true,
        expr: null
    };

    var items = [],
        settings = defaults,
        state = {
            next_pending: false,
            unext_pending: false,
            running: false,
            num: 0,
            last_out: 0,
            eof: false,
            height: get_height()
        },
        body = d3.select('body');

    pframe.onnext = function() {
        return update();
    };
    
    function getnext() {
        pframe.unext(function(res) {
            if (res === null) {
                state.eof = true;
            } else {
                var sel = settings.expr ? settings.expr(res) : settings.defsel;
                items.push({key: state.num, item: obj2html(res),
                    sel: sel, obj: res, pass: false});
                state.num++;
            }
            return update();
        });
    }

    pframe.onconfig = function(data) {
        var c = data.opts || {},
            cssopts = data.css || {},
            nitems = +c['-n'] || undefined,
            speed = +c['-t'] || undefined,
            expr = c['-e'] || null,
            batch_mode = !c['-c'],
            config = {
                nitems: nitems,
                speed: speed,
                expr: expr,
                batch_mode: batch_mode
            };
        if (config.expr) {
            config.expr = eval_getexp(config.expr);
        }
        if (!batch_mode) {
            $('select[name=mode]').val('flow');
            $('select[name=mode]').trigger('change');
        }
        settings = $.extend({}, settings, config);
    };

    function update() {
        if (!items.length) {
            if (state.eof && pframe.next_pending) {
                return exit(true);
            }
        } else if ((state.step && update_step()) ||
                (settings.batch_mode && update_batch()) ||
                (state.running && update_flow())) {
            if (pframe.next_pending) {
                var item = items.shift();
                state.last_out = Date.now();
                pframe.output(item.obj);
            }
        }
    
        update_view();
        if ((settings.batch_mode || state.running) && !pframe.unext_pending
            && !state.eof && items.length < settings.nitems) {
            getnext();
        }
    }

    function update_step() {
        state.step = false;
        var item = items[0];
        if (!item.sel) {
            items.shift();
            return false;
        } else {
            return true;
        }
    }

    function update_batch() {
        while (items.length) {
            var item = items[0];
            if (!item.pass) {
                break;
            }
            if (!item.sel) {
                items.shift();
            } else {
                return true;
            }
        }
        return false;
    }

    function update_flow() {
        var time = Date.now(),
            next_out = state.last_out + settings.speed * 1000;

        if (time < next_out) {
            /* continuous mode, running, but not yet time */
            set_timeout(update, next_out - time + 100);
            return false;
        }
        var item = items[0];
        if (!item.sel) {
            items.shift();
            set_timeout(update, settings.speed * 1000);
            return false;
        }
        return true;
    }

    var bag = d3.select("div.bag");

    function update_view() {
        function getkey(d) {
            return d && d.key;
        }
        var xitems =
            bag.selectAll("div.xitem")
                .data(items, getkey)
                .classed({enter: false, update: true});

        xitems.enter()
            .append("div")
            .classed("xitem enter", true);

        xitems.classed("passed", function(d) {
            return d.pass;
        });
        xitems.order();
        var cells =
            xitems.selectAll("div")
                .data(function(d) {
                    if (!d) {
                        return d;
                    }
                    var b = '<input type="checkbox"' +
                        (d.sel ? "checked " : "") +
                        (d.pass ? 'disabled="disabled"' : "") + '>';
                    return [{key: 'item', value: d['item']},
                            {key: 'sel', value: b}];
                }, getkey);

        cells.enter().append("div");

        cells.html(function(d) {
            return d.value;
        });

        bag.selectAll("div.xitem").selectAll("input[type=checkbox]")
            .on("change", function(d, i, j) {
                var obj = items[j];
                if (!obj.pass) {
                    obj.sel = $(this).prop('checked');
                    return update_view();
                }
            });
            
        xitems.exit().remove();

        var newheight = get_height();
        if (state.height < newheight) {
            state.height = newheight;
            send_height(newheight);
        }
    }

    $("select[name=mode]").on("change", function() {
        var val = $(this).val();
        settings.batch_mode = (val === 'batch') ? true : false;

        if (settings.batch_mode) {
            $("button[name=control]").text("Pass Batch");
            if (state.tid) {
                clearTimeout(state.tid);
                state.tid = null;
            }
        } else {
            state.running = true;
            $("button[name=control]").text("Pause");
            $("button[name=step]").prop("disabled", false);
            update();
        }
    });
    $("button[name=control]").on("click", function() {
        if (settings.batch_mode) {
            items.forEach(function(el) {
                el.pass = true;
            });
            $("button[name=step]").prop("disabled", false);
        } else {
            state.running = !state.running;
            $(this).text(state.running ? "Pause" : "Run");
            $("button[name=step]").prop("disabled", !state.running);
        }
        update();
    });
    $("button[name=quit]").on("click", function() {
        exit();
    });

    $("input[name=selall]").on("change", function() {
        settings.defsel = !settings.defsel;
        var el = $(this);
        el.prop("checked", settings.defsel);
        items.forEach(function(obj) {
            if (!obj.pass) {
                obj.sel = settings.defsel;
            }
        });
        update();
    });

    $("button[name=step]").on("click", function() {
        state.step = true;
        update();
    });

    $("input[name=selall]").prop("checked", settings.defsel); 
    send_height(get_height());
/*
    var popupdiv = d3.select("body").append("div")
     .attr("class", "tooltip")
     .style("opacity", 0);
*/
    function obj2html(obj) {
        if (obj.html) {
            return obj.html;
        } else {
            return '<p>' + obj.toString() + '</p>';
        }
    }

    function get_height() {
        return $(document.body).outerHeight(true);
    }

    function send_height(height) {
        pframe.config({height: height});
    }

    function set_timeout(f, t) {
        if (state.tid) {
            console.log('timeout already set!');
            return;
        }
        state.tid = setTimeout(function() {
            state.tid = null;
            f();
        }, t);
    }

    function eval_getexp(exp) {
        var ret;
        try {
            var fstr = '"use strict"; var getfield = function(x, self) { return !!(' + exp + ');};getfield;';
            ret = eval(fstr);
        } catch(err) {
            return null;
        }
        return ret;
    }

    function exit(val) {
        if (state.tid) {
            clearTimeout(state.tid);
            state.tid = null;
        }
        document.body.innerHTML = '';
        send_height(get_height());
        return pframe.exit(val);
    }

    </script>

</body>

</html>

EOH
jframe -o $docopt -s $HTML
