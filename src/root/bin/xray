#!pigshell

usage=<<EOH
xray         -- Inspect pipeline

Usage:
    xray [-n <items>] [-y <sec>]
    xray -h | --help

Options:
    -h --help   Show this message.
    -y          Pass if not stopped in <sec>. 0 to pass, -1 to inspect
    -n <items>  Buffer upto <items> objects
EOH

HTML=<<EOH
<!DOCTYPE html>
<html>

<head>
    <link href="http://pigshell.com/v/0.6.2/pigshell.css" rel="stylesheet"/>
    <style>

        body {
            font-family: monospace;
            font-size: 14px;
            line-height: 16px;
        }
        button.radio {
            background-color: red;
            text-align: center;
        }
        button.radio.selected {
            background-color: green;
        }

        table {
            margin-top: 1em;
        }
        thead, tfoot {
            background-color: #ddd;
        }
        td {
            padding: 0.25em;
            vertical-align: top;
        }
        tr.passed {
            background-color: #eee;
        }
    </style>
</head>

<body>
    <script src="http://code.jquery.com/jquery-1.7.2.min.js"></script>
    <script src="http://pigshell.com/extra/pframe.v0.js"></script>
    <script src="http://pigshell.com/common/d3.v3/d3.v3.min.js"></script>

    <div class="control">
        <select name="mode">
            <option value="batch" selected>Batch Mode</option>
            <option value="flow">Flow Mode</option>
        </select>
        <button name="control" class="control">Pass Batch</button>
        <button name="step" class="control">Pass 1 Item</button>
        <button name="quit" class="control">Quit</button>
    </div>
    <table>
        <thead>
            <tr>
                <td>Item</td>
                <td><button name="selectall"></button></td>
            </tr>
        </thead>
        <tbody>
        </tbody>
        <tfoot>
            <tr>
                <td></td>
                <td>&nbsp;</td>
            </tr>
        </tfoot>
    </table>

    <script type="text/javascript">

    var defaults = {
        nitems: 5,
        speed: 2,
        defsel: true
    };

    var items = [],
        settings = defaults,
        state = {
            batch_mode: true,
            next_pending: false,
            unext_pending: false,
            running: false,
            num: 0,
            last_out: 0,
            eof: false,
            height: get_height()
        },
        body = d3.select('body');

    pframe.onnext = function() {
        if (state.next_pending) {
            return exit("Unexpected next!");
        }
        state.next_pending = true;
        return update();
    };
    
    function getnext() {
        state.unext_pending = true;
        pframe.unext(function(res) {
            state.unext_pending = false;
            if (res === null) {
                state.eof = true;
            } else {
                items.unshift({key: state.num, item: obj2html(res),
                    sel: settings.defsel, obj: res, pass: false});
                state.num++;
            }
            return update();
        });
    }

    pframe.onconfig = function(config) {
        settings = $.extend({}, defaults, config);
    };

    function update() {

        if (!items.length) {
            if (state.eof && state.next_pending) {
                return pframe.exit(true);
            }
        } else if ((state.step && update_step()) ||
                (state.batch_mode && update_batch()) ||
                (state.running && update_flow())) {
            if (state.next_pending) {
                var item = items.pop();
                state.next_pending = false;
                state.last_out = Date.now();
                pframe.output(item.obj);
            }
        }
    
        update_view();
        if ((state.batch_mode || state.running) && !state.unext_pending
            && !state.eof && items.length < settings.nitems) {
            getnext();
        }
    }

    function update_step() {
        state.step = false;
        var item = items[items.length - 1];
        if (!item.sel) {
            items.pop();
            return false;
        } else {
            return true;
        }
    }

    function update_batch() {
        while (items.length) {
            var item = items[items.length - 1];
            if (!item.pass) {
                break;
            }
            if (!item.sel) {
                items.pop();
            } else {
                return true;
            }
        }
        return false;
    }

    function update_flow() {
        var time = Date.now(),
            next_out = state.last_out + settings.speed * 1000;

        if (time < next_out) {
            /* continuous mode, running, but not yet time */
            set_timeout(update, next_out - time + 100);
            return false;
        }
        var item = items[items.length - 1];
        if (!item.sel) {
            items.pop();
            set_timeout(update, settings.speed * 1000);
            return false;
        }
        return true;
    }

    var table = d3.select("tbody");

    function update_view() {
        function getkey(d) {
            return d && d.key;
        }
        var rows =
            table.selectAll("tr")
                .data(items, getkey);

        rows.enter().append("tr");
        rows.classed(function(d) {
            return d.pass ? "passed" : "";
        });
        rows.order();

        var cells =
            rows.selectAll("td")
                .data(function(d) {
                    if (!d) {
                        return d;
                    }
                    var b = '<button class="radio ' + (d.sel ? "selected" : "") +
                        '"></button>';
                    return [{key: 'item', value: d['item']},
                            {key: 'sel', value: b}];
                }, getkey);

        cells.enter().append("td");

        cells.html(function(d) {
            return d.value;
        });

        table.selectAll("tr").selectAll("button")
            .on("click", function(d, i, j) {
                var obj = items[j];
                if (!obj.pass) {
                    obj.sel = !obj.sel;
                    return update_view();
                }
            });
            
        rows.exit().remove();

        var newheight = get_height();
        if (state.height < newheight) {
            state.height = newheight;
            send_height(newheight);
        }
    }

    $("select[name=mode]").on("change", function() {
        var val = $(this).val();
        state.batch_mode = (val === 'batch') ? true : false;

        if (state.batch_mode) {
            $("button[name=control]").text("Pass Batch");
        } else {
            state.running = false;
            $("button[name=control]").text("Run");
            $("button[name=step]").prop("disabled", false);
        }
    });
    $("button[name=control]").on("click", function() {
        if (state.batch_mode) {
            items.forEach(function(el) {
                el.pass = true;
            });
            $("button[name=step]").prop("disabled", false);
        } else {
            state.running = !state.running;
            $(this).text(state.running ? "Pause" : "Run");
            $("button[name=step]").prop("disabled", !state.running);
        }
        update();
    });
    $("button[name=quit]").on("click", function() {
        exit();
    });
    $("button[name=selectall]").addClass("radio" + (settings.defsel ? " selected" : "")); 

    $("button[name=selectall]").on("click", function() {
        settings.defsel = !settings.defsel;
        var el = $(this);
        if (settings.defsel) {
            el.addClass("selected");
        } else {
            el.removeClass("selected");
        }
        items.forEach(function(obj) {
            if (!obj.pass) {
                obj.sel = settings.defsel;
            }
        });
        update();
    });

    $("button[name=step]").on("click", function() {
        state.step = true;
        update();
    });

    function obj2html(obj) {
        if (obj.html) {
            return obj.html;
        } else {
            return '<p>' + obj.toString() + '</p>';
        }
    }

    function get_height() {
        var myheight = document.documentElement.scrollHeight ||
            document.body.scrollHeight;

        return myheight;
    }

    function send_height(height) {
        pframe.config({height: height});
    }

    function set_timeout(f, t) {
        if (state.tid) {
            console.log('timeout already set!');
            return;
        }
        state.tid = setTimeout(function() {
            state.tid = null;
            f();
        }, t);
    }

    send_height(get_height());

    function exit(val) {
        if (state.tid) {
            clearTimeout(state.tid);
            state.tid = null;
        }
        document.body.innerHTML = '';
        send_height(get_height());
        return pframe.exit(val);
    }
    </script>

</body>

</html>

EOH
jframe -s $HTML
