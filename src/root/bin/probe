#!pigshell

usage=<<EOH
probe        -- Visual pipeline inspector

Usage:
    probe [-m <mode>] [-q <size>] [-n <items>] [-t <sec>] [-s <defsel>] [-p] [-e <expr>]
    probe -h | --help

Options:
    -h --help   Show this message.
    -q <size>   Quantum of processing: one, batch, all items [default: batch]
    -m <mode>   auto or manual [default: manual]
    -t <sec>    Process items every <sec> seconds in auto mode
    -n <items>  Buffer upto <items> objects [default: 5]
    -s <defsel> Default selection of items, true or false [default: true]
    -p          Run probe immediately
    -e <expr>   Javascript expression, e.g. 'x.attr === 10' to select objects
EOH

if ! docopt $usage $*; then
    exit false
fi

HTML=<<EOH
<!DOCTYPE html>
<html>

<head>
    <style>

        body {
            font-family: monospace;
            font-size: 14px;
            line-height: 16px;
            margin: 0;
            padding: 0;
        }
        div.xitem {
            display: inline-block;
            margin: 0.25em;
        }
        div.xitem div {
            display: inline-block;
            padding: 0.25em;
            vertical-align: top;
        }
        .passed {
            background-color: #eee;
            border: 1px solid #666;
        }
        .enter {
            border: 1px solid green;
            /*background-color: rgb(229, 245, 224);*/
        }
        .update {
            border: 1px solid #222;
        }
        div.control {
            padding: 0.25em;
        }
        span.rgroup {
            border: 1px solid #888;
            padding: 0.25em;
        }
    </style>
</head>

<body>
    <script src="http://pigshell.com/common/lib/jquery-1.7.2/jquery-1.7.2.min.js"></script>
    <script src="http://pigshell.com/extra/pframe.v0.js"></script>
    <script src="http://pigshell.com/common/lib/d3-3.4.1/d3.v3.min.js"></script>

    <div class="control">
        Process 
        <span class="rgroup">
            <input type="radio" name="quantum" value="one">one</input>
            <input type="radio" name="quantum" value="batch">batch</input>
            <input type="radio" name="quantum" value="all">all</input>
        </span>&nbsp;items
        <span class="rgroup">
            <input type="radio" name="mode" value="manual">manually
            <input type="radio" name="mode" value="auto">every
            <input type="textbox" size="4" name="speed">seconds
        </span>
        &nbsp;
        <span class="rgroup">
        Default <input name="defsel" type="checkbox"></input>
        </span>
        &nbsp;<button name="control" class="control">Go</button>
        <button name="quit" class="control">Quit</button>
    </div>

    <div class="bag"></div>

    <script type="text/javascript">

    var defaults = {
        nitems: 5,
        mode: 'manual',
        speed: 2,
        defsel: true,
        quantum: 'batch',
        expr: null
    };

    var items = [],
        state = {
            next_pending: false,
            unext_pending: false,
            running: false,
            num: 0,
            last_update: 0,
            eof: false,
            height: get_height()
        },
        body = d3.select('body');

    pframe.onnext = function() {
        return update();
    };
    
    function getnext() {
        pframe.unext(function(res) {
            if (res === null) {
                state.eof = true;
            } else {
                var sel = state.expr ? state.expr(res) : state.defsel;
                items.push({key: state.num, item: obj2html(res),
                    sel: sel, obj: res, pass: false});
                state.num++;
            }
            return update();
        });
    }

    pframe.onconfig = function(data) {
        var c = data.opts || {},
            nitems = +c['-n'] || undefined,
            speed = +c['-t'],
            expr = c['-e'] || null,
            quantum = c['-q'] || undefined,
            mode = c['-m'] || undefined,
            defsel = (c['-s'] !== 'true') ? false : true,
            running = !!c['-p'],
            config = {
                nitems: nitems,
                speed: speed,
                expr: expr,
                quantum: quantum,
                mode: mode,
                defsel: defsel,
                running: running
            };
        if (isNaN(speed) || speed < 1) {
            config.speed = undefined;
        } else {
            config.mode = 'auto';
        }
        if (config.expr) {
            config.expr = eval_getexp(config.expr);
        }
        
        $.extend(state, defaults, config);
        state.oldsel = state.defsel;

        update();
    };

    function update() {
        update_state();
        if (pframe.next_pending && items.length && items[0].pass) {
            var item = items.shift();
            pframe.output(item.obj);
        }
        update_view();
        if (!pframe.unext_pending && !state.eof &&
            items.length < state.nitems) {
            getnext();
        }
    }

    function update_state() {
        if (state.defsel !== state.oldsel) {
            items.forEach(function(el) {
                el.sel = el.pass ? el.sel : state.defsel;
            });
        }
        if (!items.length) {
            if (state.eof && pframe.next_pending) {
                return exit(true);
            }
            return;
        }
        if (!state.running) {
            return;
        }
        if (state.mode === 'auto') {
            var next_update = state.last_update + state.speed * 1000,
                now = Date.now();
            if (now < next_update) {
                if (!state.tid) {
                    set_timeout(update, next_update - now + 100)
                }
                return;
            }
            state.last_update = now;
            set_timeout(update, state.speed * 1000);
        }
        for (var i = 0, len = items.length; i < len; i++) {
            var item = items[i];
            if (!item.pass) {
                item.pass = true;
                if (state.quantum === 'one') {
                    break;
                }
            }
        }
        if (state.quantum !== 'all' && state.mode === 'manual') {
            state.running = false;
        }
    }

    var bag = d3.select("div.bag");

    function update_view() {
        /* Control update */
        $('input[name="quantum"]').val([state.quantum])
            .prop('disabled', state.running);
        $('input[name="mode"]').val([state.mode])
            .prop('disabled', state.running || state.quantum === 'all');
        $('input[name="speed"]').val(state.speed)
            .prop('disabled', state.running || state.mode !== 'auto'
                || state.quantum === 'all');
        $('input[name="defsel"]').prop('checked', state.defsel)
            .prop('disabled', state.running);
        $('button[name="control"]').text(state.running ? 'Pause' : 'Go');

        /* Item update */
        function getkey(d) {
            return d && d.key;
        }
        var xitems =
            bag.selectAll("div.xitem")
                .data(items, getkey)
                .classed({enter: false, update: true});

        xitems.enter()
            .append("div")
            .classed("xitem enter", true);

        xitems.classed("passed", function(d) {
            return d.pass;
        });
        xitems.order();
        var cells =
            xitems.selectAll("div")
                .data(function(d) {
                    if (!d) {
                        return d;
                    }
                    var b = '<input type="checkbox"' +
                        (d.sel ? "checked " : "") +
                        (d.pass ? 'disabled="disabled"' : "") + '>';
                    return [{key: 'item', value: d['item']},
                            {key: 'sel', value: b}];
                }, getkey);

        cells.enter().append("div");

        cells.html(function(d) {
            return d.value;
        });

        bag.selectAll("div.xitem").selectAll("input[type=checkbox]")
            .on("change", function(d, i, j) {
                var obj = items[j];
                if (!obj.pass) {
                    obj.sel = $(this).prop('checked');
                    return update_view();
                }
            });
            
        xitems.exit().remove();

        var newheight = get_height();
        if (state.height < newheight) {
            state.height = newheight;
            send_height(newheight);
        }
    }

    $("input[name=quantum]").on("change", function() {
        state.quantum = $(this).val();
        update();
    });
    $("input[name=mode]").on("change", function() {
        state.mode = $(this).val();
        update();
    });
    $("input[name=speed]").on("change", function() {
        var speed = +$(this).val();
        if (!isNaN(speed) && speed > 0) {
            state.speed = speed;
        }
        update();
    });
    $("button[name=control]").on("click", function() {
        state.running = !state.running;
        update();
    });
    $("button[name=quit]").on("click", function() {
        exit();
    });

    $("input[name=defsel]").on("change", function() {
        state.oldsel = state.defsel;
        state.defsel = !state.defsel;
        update();
    });


    send_height(get_height());
    function obj2html(obj) {
        if (obj.html) {
            return obj.html;
        } else {
            return '<p>' + obj.toString() + '</p>';
        }
    }

    function get_height() {
        return $(document.body).outerHeight(true);
    }

    function send_height(height) {
        pframe.config({height: height});
    }

    function set_timeout(f, t) {
        if (state.tid) {
            console.log('timeout already set!');
            return;
        }
        state.tid = setTimeout(function() {
            state.tid = null;
            console.log("running timer at", Date.now());
            f();
        }, t);
    }

    function eval_getexp(exp) {
        var ret;
        try {
            var fstr = '"use strict"; var getfield = function(x, self) { return !!(' + exp + ');};getfield;';
            ret = eval(fstr);
        } catch(err) {
            return null;
        }
        return ret;
    }

    function exit(val) {
        if (state.tid) {
            clearTimeout(state.tid);
            state.tid = null;
        }
        document.body.innerHTML = '';
        send_height(get_height());
        return pframe.exit(val);
    }

    </script>

</body>

</html>

EOH
iframe -a "scripts,same-origin" -o $docopt -s $HTML
